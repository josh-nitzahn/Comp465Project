int state = 0; //0 - going forward, 1 - homing to target
int lifespan = 0;
int max_span;
Vec3 target;
Object3D parent;


Missile(Object3D p, int ms)
{
	parent = p;
	max_span = ms;
}

warbird.FisPressed()
{
	case 'F;
		if (shipMissile.getState(0) && missileCounter < max_missile)
		{	
			missileCounter++
			shipMissile.setState(1);
		}
	break;
}


update()
{
	if (state == 0)
	{
		position = parent.position + offset;
		visible = false;
		if ((parent == Unum || parent == Duo) && withinProximity(this, warbird, 3000))
		{
			state = 1;
		}
	}
	else if (state == 1)
	{
		visible = true;
		vec3 direction = null;
		if (parent == warbird)
		{
			if (withinProximity(this, Unum, 3000))
			{
				direction = normalize(unum.position);
			}
			else if (withinProximity(this, Duo, 3000))
			{
				direction = normalize(duo.position);
			}
			else
			{
				direction = normalize(this.orientation);
			}
		}
		else if (parent == Unum || parent == Duo)
		{
			if (withingProximity(this, warbird, 3000))
			{
				direction = normalize(warbird.position);
			}
			else
			{
				direction = normalize(this.orientation);
			}
		}
		else
		{
			//error bad parent
		}
		missile.move(direction);
		lifespan++;
		
		if (parent == warbird)
		{
			if (withinProximity(this, Unum, 10))
			{
				//Unum's launcher is destroyed
				printf statement
				delete the unum launcher
				state = 0;
				reset code;
			}
			else if (withinProximity(this, Duo, 10))
			{
				//Duo's launcher is destroyed
				printf statement
				delete the duo launcher
				state = 0;
				reset code;
			}
		}
		else if (parent == Unum || parent == Duo)
		{
			if (withingProximity(this, warbird, 10))
			{
				//warbird is destroyed
				printf statement
				<stop the game, its game over>
			}
		}
		else
		{
			//error bad parent
		}

		if (lifespan == max_span)
		{
			//Missile failed
			printf statement
			state = 0;
			reset code;
		}
	}
	else
	{
		//error bad state
	}
	reanimate();
}